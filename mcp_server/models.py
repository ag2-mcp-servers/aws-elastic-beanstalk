# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:14:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ARN(RootModel[str]):
    root: str


class AbortableOperationInProgress(RootModel[bool]):
    root: bool


class ActionHistoryStatus(Enum):
    Completed = 'Completed'
    Failed = 'Failed'
    Unknown = 'Unknown'


class ActionStatus(Enum):
    Scheduled = 'Scheduled'
    Pending = 'Pending'
    Running = 'Running'
    Unknown = 'Unknown'


class ActionType(Enum):
    InstanceRefresh = 'InstanceRefresh'
    PlatformUpdate = 'PlatformUpdate'
    Unknown = 'Unknown'


class ApplicationArn(RootModel[str]):
    root: str


class ApplicationName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ApplicationNamesList(RootModel[List[ApplicationName]]):
    root: List[ApplicationName]


class ApplicationVersionArn(RootModel[str]):
    root: str


class ApplicationVersionProccess(RootModel[bool]):
    root: bool


class ApplicationVersionStatus(Enum):
    Processed = 'Processed'
    Unprocessed = 'Unprocessed'
    Failed = 'Failed'
    Processing = 'Processing'
    Building = 'Building'


class AutoCreateApplication(RootModel[bool]):
    root: bool


class BoxedBoolean(RootModel[bool]):
    root: bool


class BoxedInt(RootModel[int]):
    root: int


class BranchName(RootModel[str]):
    root: str


class BranchOrder(RootModel[int]):
    root: int


class Builder(BaseModel):
    ARN_1: Optional[ARN] = Field(None, alias='ARN')


class Cause(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class Causes(RootModel[List[Cause]]):
    root: List[Cause]


class CnameAvailability(RootModel[bool]):
    root: bool


class CodeBuildNotInServiceRegionException(RootModel[Any]):
    root: Any


class ComputeType(Enum):
    BUILD_GENERAL1_SMALL = 'BUILD_GENERAL1_SMALL'
    BUILD_GENERAL1_MEDIUM = 'BUILD_GENERAL1_MEDIUM'
    BUILD_GENERAL1_LARGE = 'BUILD_GENERAL1_LARGE'


class ConfigurationDeploymentStatus(Enum):
    deployed = 'deployed'
    pending = 'pending'
    failed = 'failed'


class ConfigurationOptionDefaultValue(RootModel[str]):
    root: str


class ConfigurationOptionName(RootModel[str]):
    root: str


class ConfigurationOptionPossibleValue(RootModel[str]):
    root: str


class ConfigurationOptionPossibleValues(
    RootModel[List[ConfigurationOptionPossibleValue]]
):
    root: List[ConfigurationOptionPossibleValue]


class ConfigurationOptionSeverity(RootModel[str]):
    root: str


class ConfigurationOptionValue(RootModel[str]):
    root: str


class ConfigurationOptionValueType(Enum):
    Scalar = 'Scalar'
    List = 'List'


class ConfigurationTemplateName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ConfigurationTemplateNamesList(RootModel[List[ConfigurationTemplateName]]):
    root: List[ConfigurationTemplateName]


class CreationDate(RootModel[datetime]):
    root: datetime


class DNSCname(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DNSCnamePrefix(RootModel[constr(min_length=4, max_length=63)]):
    root: constr(min_length=4, max_length=63)


class DeleteConfigurationTemplateMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    TemplateName: ConfigurationTemplateName


class DeleteSourceBundle(RootModel[bool]):
    root: bool


class DeploymentTimestamp(RootModel[datetime]):
    root: datetime


class DescribeApplicationsMessage(BaseModel):
    ApplicationNames: Optional[ApplicationNamesList] = None


class Description(RootModel[constr(max_length=200)]):
    root: constr(max_length=200)


class Ec2InstanceId(RootModel[str]):
    root: str


class ElasticBeanstalkServiceException(RootModel[Any]):
    root: Any


class EndpointURL(RootModel[str]):
    root: str


class EnvironmentArn(RootModel[str]):
    root: str


class EnvironmentHealth(Enum):
    Green = 'Green'
    Yellow = 'Yellow'
    Red = 'Red'
    Grey = 'Grey'


class EnvironmentHealthAttribute(Enum):
    Status = 'Status'
    Color = 'Color'
    Causes = 'Causes'
    ApplicationMetrics = 'ApplicationMetrics'
    InstancesHealth = 'InstancesHealth'
    All = 'All'
    HealthStatus = 'HealthStatus'
    RefreshedAt = 'RefreshedAt'


class EnvironmentHealthAttributes(RootModel[List[EnvironmentHealthAttribute]]):
    root: List[EnvironmentHealthAttribute]


class EnvironmentHealthStatus(Enum):
    NoData = 'NoData'
    Unknown = 'Unknown'
    Pending = 'Pending'
    Ok = 'Ok'
    Info = 'Info'
    Warning = 'Warning'
    Degraded = 'Degraded'
    Severe = 'Severe'
    Suspended = 'Suspended'


class EnvironmentId(RootModel[str]):
    root: str


class EnvironmentIdList(RootModel[List[EnvironmentId]]):
    root: List[EnvironmentId]


class EnvironmentInfoType(Enum):
    tail = 'tail'
    bundle = 'bundle'


class EnvironmentName(RootModel[constr(min_length=4, max_length=40)]):
    root: constr(min_length=4, max_length=40)


class EnvironmentNamesList(RootModel[List[EnvironmentName]]):
    root: List[EnvironmentName]


class EnvironmentStatus(Enum):
    Aborting = 'Aborting'
    Launching = 'Launching'
    Updating = 'Updating'
    LinkingFrom = 'LinkingFrom'
    LinkingTo = 'LinkingTo'
    Ready = 'Ready'
    Terminating = 'Terminating'
    Terminated = 'Terminated'


class EventDate(RootModel[datetime]):
    root: datetime


class EventMessage(RootModel[str]):
    root: str


class EventSeverity(Enum):
    TRACE = 'TRACE'
    DEBUG = 'DEBUG'
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'
    FATAL = 'FATAL'


class FailureType(Enum):
    UpdateCancelled = 'UpdateCancelled'
    CancellationFailed = 'CancellationFailed'
    RollbackFailed = 'RollbackFailed'
    RollbackSuccessful = 'RollbackSuccessful'
    InternalFailure = 'InternalFailure'
    InvalidEnvironmentState = 'InvalidEnvironmentState'
    PermissionsError = 'PermissionsError'


class FileTypeExtension(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ForceTerminate(RootModel[bool]):
    root: bool


class GroupName(RootModel[constr(min_length=1, max_length=19)]):
    root: constr(min_length=1, max_length=19)


class ImageId(RootModel[str]):
    root: str


class IncludeDeleted(RootModel[bool]):
    root: bool


class IncludeDeletedBackTo(RootModel[datetime]):
    root: datetime


class InstanceId(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class InstancesHealthAttribute(Enum):
    HealthStatus = 'HealthStatus'
    Color = 'Color'
    Causes = 'Causes'
    ApplicationMetrics = 'ApplicationMetrics'
    RefreshedAt = 'RefreshedAt'
    LaunchedAt = 'LaunchedAt'
    System = 'System'
    Deployment = 'Deployment'
    AvailabilityZone = 'AvailabilityZone'
    InstanceType = 'InstanceType'
    All = 'All'


class InstancesHealthAttributes(RootModel[List[InstancesHealthAttribute]]):
    root: List[InstancesHealthAttribute]


class InsufficientPrivilegesException(RootModel[Any]):
    root: Any


class Integer(RootModel[int]):
    root: int


class InvalidRequestException(RootModel[Any]):
    root: Any


class LaunchedAt(RootModel[datetime]):
    root: datetime


class LoadAverageValue(RootModel[float]):
    root: float


class Maintainer(RootModel[str]):
    root: str


class ManagedActionHistoryMaxItems(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ManagedActionInvalidStateException(RootModel[Any]):
    root: Any


class MaxAgeRule(BaseModel):
    DeleteSourceFromS3: Optional[BoxedBoolean] = None
    Enabled: BoxedBoolean
    MaxAgeInDays: Optional[BoxedInt] = None


class MaxCountRule(BaseModel):
    DeleteSourceFromS3: Optional[BoxedBoolean] = None
    Enabled: BoxedBoolean
    MaxCount: Optional[BoxedInt] = None


class MaxRecords(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class Message(RootModel[str]):
    root: str


class NextToken(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class NonEmptyString(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class NullableDouble(RootModel[float]):
    root: float


class NullableInteger(RootModel[int]):
    root: int


class NullableLong(RootModel[int]):
    root: int


class OperatingSystemName(RootModel[str]):
    root: str


class OperatingSystemVersion(RootModel[str]):
    root: str


class OperationInProgressException(RootModel[Any]):
    root: Any


class OperationsRole(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class OptionNamespace(RootModel[str]):
    root: str


class OptionRestrictionMaxLength(RootModel[int]):
    root: int


class OptionRestrictionMaxValue(RootModel[int]):
    root: int


class OptionRestrictionMinValue(RootModel[int]):
    root: int


class PlatformArn(RootModel[str]):
    root: str


class PlatformBranchLifecycleState(RootModel[str]):
    root: str


class PlatformBranchMaxRecords(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PlatformCategory(RootModel[str]):
    root: str


class PlatformFilterOperator(RootModel[str]):
    root: str


class PlatformFilterType(RootModel[str]):
    root: str


class PlatformFilterValue(RootModel[str]):
    root: str


class PlatformFilterValueList(RootModel[List[PlatformFilterValue]]):
    root: List[PlatformFilterValue]


class PlatformLifecycleState(RootModel[str]):
    root: str


class PlatformMaxRecords(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PlatformName(RootModel[str]):
    root: str


class PlatformOwner(RootModel[str]):
    root: str


class PlatformStatus(Enum):
    Creating = 'Creating'
    Failed = 'Failed'
    Ready = 'Ready'
    Deleting = 'Deleting'
    Deleted = 'Deleted'


class PlatformVersion(RootModel[str]):
    root: str


class PlatformVersionStillReferencedException(RootModel[Any]):
    root: Any


class RebuildEnvironmentMessage(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')


class RefreshedAt(RootModel[datetime]):
    root: datetime


class RegexLabel(RootModel[str]):
    root: str


class RegexPattern(RootModel[str]):
    root: str


class RequestCount(RootModel[int]):
    root: int


class RequestEnvironmentInfoMessage(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    InfoType: EnvironmentInfoType


class RequestId(RootModel[str]):
    root: str


class ResourceArn(RootModel[str]):
    root: str


class ResourceId(RootModel[str]):
    root: str


class ResourceName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceQuota(BaseModel):
    Maximum: Optional[BoxedInt] = None


class ResourceQuotas(BaseModel):
    ApplicationQuota: Optional[ResourceQuota] = None
    ApplicationVersionQuota: Optional[ResourceQuota] = None
    ConfigurationTemplateQuota: Optional[ResourceQuota] = None
    CustomPlatformQuota: Optional[ResourceQuota] = None
    EnvironmentQuota: Optional[ResourceQuota] = None


class ResourceTypeNotSupportedException(RootModel[Any]):
    root: Any


class RestartAppServerMessage(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')


class RetrieveEnvironmentInfoMessage(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    InfoType: EnvironmentInfoType


class S3Bucket(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class S3Key(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class S3Location(BaseModel):
    S3Bucket_1: Optional[S3Bucket] = Field(None, alias='S3Bucket')
    S3Key_1: Optional[S3Key] = Field(None, alias='S3Key')


class S3LocationNotInServiceRegionException(RootModel[Any]):
    root: Any


class S3SubscriptionRequiredException(RootModel[Any]):
    root: Any


class SampleTimestamp(RootModel[datetime]):
    root: datetime


class SearchFilterAttribute(RootModel[str]):
    root: str


class SearchFilterOperator(RootModel[str]):
    root: str


class SearchFilterValue(RootModel[str]):
    root: str


class SearchFilterValues(RootModel[List[SearchFilterValue]]):
    root: List[SearchFilterValue]


class SolutionStackFileTypeList(RootModel[List[FileTypeExtension]]):
    root: List[FileTypeExtension]


class SolutionStackName(RootModel[str]):
    root: str


class SourceBundleDeletionException(RootModel[Any]):
    root: Any


class SourceConfiguration(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    TemplateName: Optional[ConfigurationTemplateName] = None


class SourceLocation(RootModel[constr(pattern=r'.+/.+', min_length=3, max_length=255)]):
    root: constr(pattern=r'.+/.+', min_length=3, max_length=255)


class SourceRepository(Enum):
    CodeCommit = 'CodeCommit'
    S3 = 'S3'


class SourceType(Enum):
    Git = 'Git'
    Zip = 'Zip'


class StatusCodes(BaseModel):
    Status2xx: Optional[NullableInteger] = None
    Status3xx: Optional[NullableInteger] = None
    Status4xx: Optional[NullableInteger] = None
    Status5xx: Optional[NullableInteger] = None


class String(RootModel[str]):
    root: str


class SupportedAddon(RootModel[str]):
    root: str


class SupportedAddonList(RootModel[List[SupportedAddon]]):
    root: List[SupportedAddon]


class SupportedTier(RootModel[str]):
    root: str


class SupportedTierList(RootModel[List[SupportedTier]]):
    root: List[SupportedTier]


class SwapEnvironmentCNAMEsMessage(BaseModel):
    DestinationEnvironmentId: Optional[EnvironmentId] = None
    DestinationEnvironmentName: Optional[EnvironmentName] = None
    SourceEnvironmentId: Optional[EnvironmentId] = None
    SourceEnvironmentName: Optional[EnvironmentName] = None


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TerminateEnvForce(RootModel[bool]):
    root: bool


class TerminateEnvironmentResources(RootModel[bool]):
    root: bool


class TimeFilterEnd(RootModel[datetime]):
    root: datetime


class TimeFilterStart(RootModel[datetime]):
    root: datetime


class Timestamp(RootModel[datetime]):
    root: datetime


class Token(RootModel[str]):
    root: str


class TooManyApplicationVersionsException(RootModel[Any]):
    root: Any


class TooManyApplicationsException(RootModel[Any]):
    root: Any


class TooManyBucketsException(RootModel[Any]):
    root: Any


class TooManyConfigurationTemplatesException(RootModel[Any]):
    root: Any


class TooManyEnvironmentsException(RootModel[Any]):
    root: Any


class TooManyPlatformsException(RootModel[Any]):
    root: Any


class TooManyTagsException(RootModel[Any]):
    root: Any


class Trigger(BaseModel):
    Name: Optional[ResourceId] = None


class TriggerList(RootModel[List[Trigger]]):
    root: List[Trigger]


class UpdateApplicationMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Description_1: Optional[Description] = Field(None, alias='Description')


class UpdateDate(RootModel[datetime]):
    root: datetime


class UserDefinedOption(RootModel[bool]):
    root: bool


class ValidationMessageString(RootModel[str]):
    root: str


class ValidationSeverity(Enum):
    error = 'error'
    warning = 'warning'


class VersionLabel(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class VersionLabels(RootModel[List[VersionLabel]]):
    root: List[VersionLabel]


class VersionLabelsList(RootModel[List[VersionLabel]]):
    root: List[VersionLabel]


class VirtualizationType(RootModel[str]):
    root: str


class Action(Enum):
    AbortEnvironmentUpdate = 'AbortEnvironmentUpdate'


class Version(Enum):
    field_2010_12_01 = '2010-12-01'


class Action4(Enum):
    ApplyEnvironmentManagedAction = 'ApplyEnvironmentManagedAction'


class Action8(Enum):
    AssociateEnvironmentOperationsRole = 'AssociateEnvironmentOperationsRole'


class Action12(Enum):
    CheckDNSAvailability = 'CheckDNSAvailability'


class Action16(Enum):
    ComposeEnvironments = 'ComposeEnvironments'


class Action20(Enum):
    CreateApplication = 'CreateApplication'


class SourceBuildInformation(BaseModel):
    SourceLocation_1: SourceLocation = Field(..., alias='SourceLocation')
    SourceRepository_1: SourceRepository = Field(..., alias='SourceRepository')
    SourceType_1: SourceType = Field(..., alias='SourceType')


class SourceBundle(BaseModel):
    S3Bucket_1: Optional[S3Bucket] = Field(None, alias='S3Bucket')
    S3Key_1: Optional[S3Key] = Field(None, alias='S3Key')


class BuildConfiguration(BaseModel):
    ArtifactName: Optional[String] = None
    CodeBuildServiceRole: NonEmptyString
    ComputeType_1: Optional[ComputeType] = Field(None, alias='ComputeType')
    Image: NonEmptyString
    TimeoutInMinutes: Optional[BoxedInt] = None


class Action24(Enum):
    CreateApplicationVersion = 'CreateApplicationVersion'


class Action28(Enum):
    CreateConfigurationTemplate = 'CreateConfigurationTemplate'


class Tier(BaseModel):
    Name: Optional[String] = None
    Type: Optional[String] = None
    Version: Optional[String] = None


class Action32(Enum):
    CreateEnvironment = 'CreateEnvironment'


class PlatformDefinitionBundle(BaseModel):
    S3Bucket_1: Optional[S3Bucket] = Field(None, alias='S3Bucket')
    S3Key_1: Optional[S3Key] = Field(None, alias='S3Key')


class Action36(Enum):
    CreatePlatformVersion = 'CreatePlatformVersion'


class Action40(Enum):
    CreateStorageLocation = 'CreateStorageLocation'


class Action44(Enum):
    DeleteApplication = 'DeleteApplication'


class Action48(Enum):
    DeleteApplicationVersion = 'DeleteApplicationVersion'


class Action52(Enum):
    DeleteConfigurationTemplate = 'DeleteConfigurationTemplate'


class Action56(Enum):
    DeleteEnvironmentConfiguration = 'DeleteEnvironmentConfiguration'


class Action60(Enum):
    DeletePlatformVersion = 'DeletePlatformVersion'


class Action64(Enum):
    DescribeAccountAttributes = 'DescribeAccountAttributes'


class Action68(Enum):
    DescribeApplicationVersions = 'DescribeApplicationVersions'


class Action72(Enum):
    DescribeApplications = 'DescribeApplications'


class ApplicationNames(RootModel[List[ApplicationName]]):
    root: List[ApplicationName]


class Action76(Enum):
    DescribeConfigurationOptions = 'DescribeConfigurationOptions'


class Action80(Enum):
    DescribeConfigurationSettings = 'DescribeConfigurationSettings'


class Action84(Enum):
    DescribeEnvironmentHealth = 'DescribeEnvironmentHealth'


class AttributeNames(RootModel[List[EnvironmentHealthAttribute]]):
    root: List[EnvironmentHealthAttribute]


class Action88(Enum):
    DescribeEnvironmentManagedActionHistory = 'DescribeEnvironmentManagedActionHistory'


class Status(Enum):
    Scheduled = 'Scheduled'
    Pending = 'Pending'
    Running = 'Running'
    Unknown = 'Unknown'


class Action92(Enum):
    DescribeEnvironmentManagedActions = 'DescribeEnvironmentManagedActions'


class Action96(Enum):
    DescribeEnvironmentResources = 'DescribeEnvironmentResources'


class Action100(Enum):
    DescribeEnvironments = 'DescribeEnvironments'


class EnvironmentIds(RootModel[List[EnvironmentId]]):
    root: List[EnvironmentId]


class EnvironmentNames(RootModel[List[EnvironmentName]]):
    root: List[EnvironmentName]


class Severity(Enum):
    TRACE = 'TRACE'
    DEBUG = 'DEBUG'
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'
    FATAL = 'FATAL'


class Action104(Enum):
    DescribeEvents = 'DescribeEvents'


class Action108(Enum):
    DescribeInstancesHealth = 'DescribeInstancesHealth'


class AttributeNames1(RootModel[List[InstancesHealthAttribute]]):
    root: List[InstancesHealthAttribute]


class Action112(Enum):
    DescribePlatformVersion = 'DescribePlatformVersion'


class Action116(Enum):
    DisassociateEnvironmentOperationsRole = 'DisassociateEnvironmentOperationsRole'


class Action120(Enum):
    ListAvailableSolutionStacks = 'ListAvailableSolutionStacks'


class Action124(Enum):
    ListPlatformBranches = 'ListPlatformBranches'


class Action128(Enum):
    ListPlatformVersions = 'ListPlatformVersions'


class Action132(Enum):
    ListTagsForResource = 'ListTagsForResource'


class Action136(Enum):
    RebuildEnvironment = 'RebuildEnvironment'


class InfoType(Enum):
    tail = 'tail'
    bundle = 'bundle'


class Action140(Enum):
    RequestEnvironmentInfo = 'RequestEnvironmentInfo'


class Action144(Enum):
    RestartAppServer = 'RestartAppServer'


class Action148(Enum):
    RetrieveEnvironmentInfo = 'RetrieveEnvironmentInfo'


class Action152(Enum):
    SwapEnvironmentCNAMEs = 'SwapEnvironmentCNAMEs'


class Action156(Enum):
    TerminateEnvironment = 'TerminateEnvironment'


class Action160(Enum):
    UpdateApplication = 'UpdateApplication'


class Action164(Enum):
    UpdateApplicationResourceLifecycle = 'UpdateApplicationResourceLifecycle'


class Action168(Enum):
    UpdateApplicationVersion = 'UpdateApplicationVersion'


class Action172(Enum):
    UpdateConfigurationTemplate = 'UpdateConfigurationTemplate'


class Action176(Enum):
    UpdateEnvironment = 'UpdateEnvironment'


class Action180(Enum):
    UpdateTagsForResource = 'UpdateTagsForResource'


class TagsToRemove(RootModel[List[TagKey]]):
    root: List[TagKey]


class Action184(Enum):
    ValidateConfigurationSettings = 'ValidateConfigurationSettings'


class AbortEnvironmentUpdateMessage(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')


class ApplicationVersionLifecycleConfig(BaseModel):
    MaxAgeRule_1: Optional[MaxAgeRule] = Field(None, alias='MaxAgeRule')
    MaxCountRule_1: Optional[MaxCountRule] = Field(None, alias='MaxCountRule')


class ApplyEnvironmentManagedActionRequest(BaseModel):
    ActionId: String
    EnvironmentId: Optional[String] = None
    EnvironmentName: Optional[String] = None


class ApplyEnvironmentManagedActionResult(BaseModel):
    ActionDescription: Optional[String] = None
    ActionId: Optional[String] = None
    ActionType_1: Optional[ActionType] = Field(None, alias='ActionType')
    Status: Optional[String] = None


class AssociateEnvironmentOperationsRoleMessage(BaseModel):
    EnvironmentName_1: EnvironmentName = Field(..., alias='EnvironmentName')
    OperationsRole_1: OperationsRole = Field(..., alias='OperationsRole')


class AutoScalingGroup(BaseModel):
    Name: Optional[ResourceId] = None


class AutoScalingGroupList(RootModel[List[AutoScalingGroup]]):
    root: List[AutoScalingGroup]


class AvailableSolutionStackNamesList(RootModel[List[SolutionStackName]]):
    root: List[SolutionStackName]


class CPUUtilization(BaseModel):
    IOWait: Optional[NullableDouble] = None
    IRQ: Optional[NullableDouble] = None
    Idle: Optional[NullableDouble] = None
    Nice: Optional[NullableDouble] = None
    Privileged: Optional[NullableDouble] = None
    SoftIRQ: Optional[NullableDouble] = None
    System: Optional[NullableDouble] = None
    User: Optional[NullableDouble] = None


class CheckDNSAvailabilityMessage(BaseModel):
    CNAMEPrefix: DNSCnamePrefix


class CheckDNSAvailabilityResultMessage(BaseModel):
    Available: Optional[CnameAvailability] = None
    FullyQualifiedCNAME: Optional[DNSCname] = None


class ComposeEnvironmentsMessage(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    GroupName_1: Optional[GroupName] = Field(None, alias='GroupName')
    VersionLabels_1: Optional[VersionLabels] = Field(None, alias='VersionLabels')


class ConfigurationOptionSetting(BaseModel):
    Namespace: Optional[OptionNamespace] = None
    OptionName: Optional[ConfigurationOptionName] = None
    ResourceName_1: Optional[ResourceName] = Field(None, alias='ResourceName')
    Value: Optional[ConfigurationOptionValue] = None


class ConfigurationOptionSettingsList(RootModel[List[ConfigurationOptionSetting]]):
    root: List[ConfigurationOptionSetting]


class ConfigurationSettingsDescription(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    DateCreated: Optional[CreationDate] = None
    DateUpdated: Optional[UpdateDate] = None
    DeploymentStatus: Optional[ConfigurationDeploymentStatus] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    OptionSettings: Optional[ConfigurationOptionSettingsList] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )
    TemplateName: Optional[ConfigurationTemplateName] = None


class ConfigurationSettingsDescriptionList(
    RootModel[List[ConfigurationSettingsDescription]]
):
    root: List[ConfigurationSettingsDescription]


class ConfigurationSettingsDescriptions(BaseModel):
    ConfigurationSettings: Optional[ConfigurationSettingsDescriptionList] = None


class CreateStorageLocationResultMessage(BaseModel):
    S3Bucket_1: Optional[S3Bucket] = Field(None, alias='S3Bucket')


class CustomAmi(BaseModel):
    ImageId_1: Optional[ImageId] = Field(None, alias='ImageId')
    VirtualizationType_1: Optional[VirtualizationType] = Field(
        None, alias='VirtualizationType'
    )


class CustomAmiList(RootModel[List[CustomAmi]]):
    root: List[CustomAmi]


class DeleteApplicationMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    TerminateEnvByForce: Optional[TerminateEnvForce] = None


class DeleteApplicationVersionMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    DeleteSourceBundle_1: Optional[DeleteSourceBundle] = Field(
        None, alias='DeleteSourceBundle'
    )
    VersionLabel_1: VersionLabel = Field(..., alias='VersionLabel')


class DeleteEnvironmentConfigurationMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    EnvironmentName_1: EnvironmentName = Field(..., alias='EnvironmentName')


class DeletePlatformVersionRequest(BaseModel):
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')


class Deployment(BaseModel):
    DeploymentId: Optional[NullableLong] = None
    DeploymentTime: Optional[DeploymentTimestamp] = None
    Status: Optional[String] = None
    VersionLabel: Optional[String] = None


class DescribeAccountAttributesResult(BaseModel):
    ResourceQuotas_1: Optional[ResourceQuotas] = Field(None, alias='ResourceQuotas')


class DescribeApplicationVersionsMessage(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[Token] = None
    VersionLabels: Optional[VersionLabelsList] = None


class DescribeConfigurationSettingsMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    TemplateName: Optional[ConfigurationTemplateName] = None


class DescribeEnvironmentHealthRequest(BaseModel):
    AttributeNames: Optional[EnvironmentHealthAttributes] = None
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')


class DescribeEnvironmentManagedActionHistoryRequest(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    MaxItems: Optional[ManagedActionHistoryMaxItems] = None
    NextToken: Optional[String] = None


class DescribeEnvironmentManagedActionsRequest(BaseModel):
    EnvironmentId: Optional[String] = None
    EnvironmentName: Optional[String] = None
    Status: Optional[ActionStatus] = None


class DescribeEnvironmentResourcesMessage(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')


class DescribeEnvironmentsMessage(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    EnvironmentIds: Optional[EnvironmentIdList] = None
    EnvironmentNames: Optional[EnvironmentNamesList] = None
    IncludeDeleted_1: Optional[IncludeDeleted] = Field(None, alias='IncludeDeleted')
    IncludedDeletedBackTo: Optional[IncludeDeletedBackTo] = None
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[Token] = None
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')


class DescribeEventsMessage(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    EndTime: Optional[TimeFilterEnd] = None
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[Token] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    RequestId_1: Optional[RequestId] = Field(None, alias='RequestId')
    Severity: Optional[EventSeverity] = None
    StartTime: Optional[TimeFilterStart] = None
    TemplateName: Optional[ConfigurationTemplateName] = None
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')


class DescribeInstancesHealthRequest(BaseModel):
    AttributeNames: Optional[InstancesHealthAttributes] = None
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribePlatformVersionRequest(BaseModel):
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')


class DisassociateEnvironmentOperationsRoleMessage(BaseModel):
    EnvironmentName_1: EnvironmentName = Field(..., alias='EnvironmentName')


class EnvironmentInfoDescription(BaseModel):
    Ec2InstanceId_1: Optional[Ec2InstanceId] = Field(None, alias='Ec2InstanceId')
    InfoType: Optional[EnvironmentInfoType] = None
    Message_1: Optional[Message] = Field(None, alias='Message')
    SampleTimestamp_1: Optional[SampleTimestamp] = Field(None, alias='SampleTimestamp')


class EnvironmentInfoDescriptionList(RootModel[List[EnvironmentInfoDescription]]):
    root: List[EnvironmentInfoDescription]


class EnvironmentLink(BaseModel):
    EnvironmentName: Optional[String] = None
    LinkName: Optional[String] = None


class EnvironmentLinks(RootModel[List[EnvironmentLink]]):
    root: List[EnvironmentLink]


class EnvironmentTier(BaseModel):
    Name: Optional[String] = None
    Type: Optional[String] = None
    Version: Optional[String] = None


class EventDescription(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    EventDate_1: Optional[EventDate] = Field(None, alias='EventDate')
    Message: Optional[EventMessage] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    RequestId_1: Optional[RequestId] = Field(None, alias='RequestId')
    Severity: Optional[EventSeverity] = None
    TemplateName: Optional[ConfigurationTemplateName] = None
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')


class EventDescriptionList(RootModel[List[EventDescription]]):
    root: List[EventDescription]


class EventDescriptionsMessage(BaseModel):
    Events: Optional[EventDescriptionList] = None
    NextToken: Optional[Token] = None


class Instance(BaseModel):
    Id: Optional[ResourceId] = None


class InstanceHealthSummary(BaseModel):
    Degraded: Optional[NullableInteger] = None
    Info: Optional[NullableInteger] = None
    NoData: Optional[NullableInteger] = None
    Ok: Optional[NullableInteger] = None
    Pending: Optional[NullableInteger] = None
    Severe: Optional[NullableInteger] = None
    Unknown: Optional[NullableInteger] = None
    Warning: Optional[NullableInteger] = None


class InstanceList(RootModel[List[Instance]]):
    root: List[Instance]


class Latency(BaseModel):
    P10: Optional[NullableDouble] = None
    P50: Optional[NullableDouble] = None
    P75: Optional[NullableDouble] = None
    P85: Optional[NullableDouble] = None
    P90: Optional[NullableDouble] = None
    P95: Optional[NullableDouble] = None
    P99: Optional[NullableDouble] = None
    P999: Optional[NullableDouble] = None


class LaunchConfiguration(BaseModel):
    Name: Optional[ResourceId] = None


class LaunchConfigurationList(RootModel[List[LaunchConfiguration]]):
    root: List[LaunchConfiguration]


class LaunchTemplate(BaseModel):
    Id: Optional[ResourceId] = None


class LaunchTemplateList(RootModel[List[LaunchTemplate]]):
    root: List[LaunchTemplate]


class ListTagsForResourceMessage(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class Listener(BaseModel):
    Port: Optional[Integer] = None
    Protocol: Optional[String] = None


class LoadAverage(RootModel[List[LoadAverageValue]]):
    root: List[LoadAverageValue]


class LoadBalancer(BaseModel):
    Name: Optional[ResourceId] = None


class LoadBalancerList(RootModel[List[LoadBalancer]]):
    root: List[LoadBalancer]


class LoadBalancerListenersDescription(RootModel[List[Listener]]):
    root: List[Listener]


class ManagedAction(BaseModel):
    ActionDescription: Optional[String] = None
    ActionId: Optional[String] = None
    ActionType_1: Optional[ActionType] = Field(None, alias='ActionType')
    Status: Optional[ActionStatus] = None
    WindowStartTime: Optional[Timestamp] = None


class ManagedActionHistoryItem(BaseModel):
    ActionDescription: Optional[String] = None
    ActionId: Optional[String] = None
    ActionType_1: Optional[ActionType] = Field(None, alias='ActionType')
    ExecutedTime: Optional[Timestamp] = None
    FailureDescription: Optional[String] = None
    FailureType_1: Optional[FailureType] = Field(None, alias='FailureType')
    FinishedTime: Optional[Timestamp] = None
    Status: Optional[ActionHistoryStatus] = None


class ManagedActionHistoryItems(RootModel[List[ManagedActionHistoryItem]]):
    root: List[ManagedActionHistoryItem] = Field(..., max_length=100, min_length=1)


class ManagedActions(RootModel[List[ManagedAction]]):
    root: List[ManagedAction] = Field(..., max_length=100, min_length=1)


class OptionRestrictionRegex(BaseModel):
    Label: Optional[RegexLabel] = None
    Pattern: Optional[RegexPattern] = None


class OptionSpecification(BaseModel):
    Namespace: Optional[OptionNamespace] = None
    OptionName: Optional[ConfigurationOptionName] = None
    ResourceName_1: Optional[ResourceName] = Field(None, alias='ResourceName')


class OptionsSpecifierList(RootModel[List[OptionSpecification]]):
    root: List[OptionSpecification]


class PlatformBranchSummary(BaseModel):
    BranchName_1: Optional[BranchName] = Field(None, alias='BranchName')
    BranchOrder_1: Optional[BranchOrder] = Field(None, alias='BranchOrder')
    LifecycleState: Optional[PlatformBranchLifecycleState] = None
    PlatformName_1: Optional[PlatformName] = Field(None, alias='PlatformName')
    SupportedTierList_1: Optional[SupportedTierList] = Field(
        None, alias='SupportedTierList'
    )


class PlatformBranchSummaryList(RootModel[List[PlatformBranchSummary]]):
    root: List[PlatformBranchSummary]


class PlatformFilter(BaseModel):
    Operator: Optional[PlatformFilterOperator] = None
    Type: Optional[PlatformFilterType] = None
    Values: Optional[PlatformFilterValueList] = None


class PlatformFilters(RootModel[List[PlatformFilter]]):
    root: List[PlatformFilter]


class PlatformFramework(BaseModel):
    Name: Optional[String] = None
    Version: Optional[String] = None


class PlatformFrameworks(RootModel[List[PlatformFramework]]):
    root: List[PlatformFramework]


class PlatformProgrammingLanguage(BaseModel):
    Name: Optional[String] = None
    Version: Optional[String] = None


class PlatformProgrammingLanguages(RootModel[List[PlatformProgrammingLanguage]]):
    root: List[PlatformProgrammingLanguage]


class PlatformSummary(BaseModel):
    OperatingSystemName_1: Optional[OperatingSystemName] = Field(
        None, alias='OperatingSystemName'
    )
    OperatingSystemVersion_1: Optional[OperatingSystemVersion] = Field(
        None, alias='OperatingSystemVersion'
    )
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    PlatformBranchLifecycleState_1: Optional[PlatformBranchLifecycleState] = Field(
        None, alias='PlatformBranchLifecycleState'
    )
    PlatformBranchName: Optional[BranchName] = None
    PlatformCategory_1: Optional[PlatformCategory] = Field(
        None, alias='PlatformCategory'
    )
    PlatformLifecycleState_1: Optional[PlatformLifecycleState] = Field(
        None, alias='PlatformLifecycleState'
    )
    PlatformOwner_1: Optional[PlatformOwner] = Field(None, alias='PlatformOwner')
    PlatformStatus_1: Optional[PlatformStatus] = Field(None, alias='PlatformStatus')
    PlatformVersion_1: Optional[PlatformVersion] = Field(None, alias='PlatformVersion')
    SupportedAddonList_1: Optional[SupportedAddonList] = Field(
        None, alias='SupportedAddonList'
    )
    SupportedTierList_1: Optional[SupportedTierList] = Field(
        None, alias='SupportedTierList'
    )


class PlatformSummaryList(RootModel[List[PlatformSummary]]):
    root: List[PlatformSummary]


class Queue(BaseModel):
    Name: Optional[String] = None
    URL: Optional[String] = None


class QueueList(RootModel[List[Queue]]):
    root: List[Queue]


class RetrieveEnvironmentInfoResultMessage(BaseModel):
    EnvironmentInfo: Optional[EnvironmentInfoDescriptionList] = None


class SearchFilter(BaseModel):
    Attribute: Optional[SearchFilterAttribute] = None
    Operator: Optional[SearchFilterOperator] = None
    Values: Optional[SearchFilterValues] = None


class SearchFilters(RootModel[List[SearchFilter]]):
    root: List[SearchFilter]


class SolutionStackDescription(BaseModel):
    PermittedFileTypes: Optional[SolutionStackFileTypeList] = None
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )


class SystemStatus(BaseModel):
    CPUUtilization_1: Optional[CPUUtilization] = Field(None, alias='CPUUtilization')
    LoadAverage_1: Optional[LoadAverage] = Field(None, alias='LoadAverage')


class Tag(BaseModel):
    Key: Optional[TagKey] = None
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class TerminateEnvironmentMessage(BaseModel):
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    ForceTerminate_1: Optional[ForceTerminate] = Field(None, alias='ForceTerminate')
    TerminateResources: Optional[TerminateEnvironmentResources] = None


class UpdateApplicationVersionMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Description_1: Optional[Description] = Field(None, alias='Description')
    VersionLabel_1: VersionLabel = Field(..., alias='VersionLabel')


class UpdateConfigurationTemplateMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Description_1: Optional[Description] = Field(None, alias='Description')
    OptionSettings: Optional[ConfigurationOptionSettingsList] = None
    OptionsToRemove: Optional[OptionsSpecifierList] = None
    TemplateName: ConfigurationTemplateName


class UpdateEnvironmentMessage(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    Description_1: Optional[Description] = Field(None, alias='Description')
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    GroupName_1: Optional[GroupName] = Field(None, alias='GroupName')
    OptionSettings: Optional[ConfigurationOptionSettingsList] = None
    OptionsToRemove: Optional[OptionsSpecifierList] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )
    TemplateName: Optional[ConfigurationTemplateName] = None
    Tier: Optional[EnvironmentTier] = None
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')


class UpdateTagsForResourceMessage(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagsToAdd: Optional[TagList] = None
    TagsToRemove: Optional[TagKeyList] = None


class ValidateConfigurationSettingsMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    OptionSettings: ConfigurationOptionSettingsList
    TemplateName: Optional[ConfigurationTemplateName] = None


class ValidationMessage(BaseModel):
    Message: Optional[ValidationMessageString] = None
    Namespace: Optional[OptionNamespace] = None
    OptionName: Optional[ConfigurationOptionName] = None
    Severity: Optional[ValidationSeverity] = None


class ValidationMessagesList(RootModel[List[ValidationMessage]]):
    root: List[ValidationMessage]


class ResourceLifecycleConfig(BaseModel):
    ServiceRole: Optional[String] = None
    VersionLifecycleConfig: Optional[ApplicationVersionLifecycleConfig] = None


class OptionSettings(RootModel[List[ConfigurationOptionSetting]]):
    root: List[ConfigurationOptionSetting]


class OptionsToRemove(RootModel[List[OptionSpecification]]):
    root: List[OptionSpecification]


class Options(RootModel[List[OptionSpecification]]):
    root: List[OptionSpecification]


class Filters(RootModel[List[SearchFilter]]):
    root: List[SearchFilter]


class Filters1(RootModel[List[PlatformFilter]]):
    root: List[PlatformFilter]


class TagsToAdd(RootModel[List[Tag]]):
    root: List[Tag]


class ApplicationMetrics(BaseModel):
    Duration: Optional[NullableInteger] = None
    Latency_1: Optional[Latency] = Field(None, alias='Latency')
    RequestCount_1: Optional[RequestCount] = Field(None, alias='RequestCount')
    StatusCodes_1: Optional[StatusCodes] = Field(None, alias='StatusCodes')


class ApplicationResourceLifecycleConfig(BaseModel):
    ServiceRole: Optional[String] = None
    VersionLifecycleConfig: Optional[ApplicationVersionLifecycleConfig] = None


class ApplicationResourceLifecycleDescriptionMessage(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    ResourceLifecycleConfig: Optional[ApplicationResourceLifecycleConfig] = None


class ApplicationVersionDescription(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    ApplicationVersionArn_1: Optional[ApplicationVersionArn] = Field(
        None, alias='ApplicationVersionArn'
    )
    BuildArn: Optional[String] = None
    DateCreated: Optional[CreationDate] = None
    DateUpdated: Optional[UpdateDate] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    SourceBuildInformation_1: Optional[SourceBuildInformation] = Field(
        None, alias='SourceBuildInformation'
    )
    SourceBundle: Optional[S3Location] = None
    Status: Optional[ApplicationVersionStatus] = None
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')


class ApplicationVersionDescriptionList(RootModel[List[ApplicationVersionDescription]]):
    root: List[ApplicationVersionDescription]


class ApplicationVersionDescriptionMessage(BaseModel):
    ApplicationVersion: Optional[ApplicationVersionDescription] = None


class ApplicationVersionDescriptionsMessage(BaseModel):
    ApplicationVersions: Optional[ApplicationVersionDescriptionList] = None
    NextToken: Optional[Token] = None


class AvailableSolutionStackDetailsList(RootModel[List[SolutionStackDescription]]):
    root: List[SolutionStackDescription]


class ConfigurationOptionDescription(BaseModel):
    ChangeSeverity: Optional[ConfigurationOptionSeverity] = None
    DefaultValue: Optional[ConfigurationOptionDefaultValue] = None
    MaxLength: Optional[OptionRestrictionMaxLength] = None
    MaxValue: Optional[OptionRestrictionMaxValue] = None
    MinValue: Optional[OptionRestrictionMinValue] = None
    Name: Optional[ConfigurationOptionName] = None
    Namespace: Optional[OptionNamespace] = None
    Regex: Optional[OptionRestrictionRegex] = None
    UserDefined: Optional[UserDefinedOption] = None
    ValueOptions: Optional[ConfigurationOptionPossibleValues] = None
    ValueType: Optional[ConfigurationOptionValueType] = None


class ConfigurationOptionDescriptionsList(
    RootModel[List[ConfigurationOptionDescription]]
):
    root: List[ConfigurationOptionDescription]


class ConfigurationOptionsDescription(BaseModel):
    Options: Optional[ConfigurationOptionDescriptionsList] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )


class ConfigurationSettingsValidationMessages(BaseModel):
    Messages: Optional[ValidationMessagesList] = None


class CreateApplicationMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Description_1: Optional[Description] = Field(None, alias='Description')
    ResourceLifecycleConfig: Optional[ApplicationResourceLifecycleConfig] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateApplicationVersionMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    AutoCreateApplication_1: Optional[AutoCreateApplication] = Field(
        None, alias='AutoCreateApplication'
    )
    BuildConfiguration_1: Optional[BuildConfiguration] = Field(
        None, alias='BuildConfiguration'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    Process: Optional[ApplicationVersionProccess] = None
    SourceBuildInformation_1: Optional[SourceBuildInformation] = Field(
        None, alias='SourceBuildInformation'
    )
    SourceBundle: Optional[S3Location] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VersionLabel_1: VersionLabel = Field(..., alias='VersionLabel')


class CreateConfigurationTemplateMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    Description_1: Optional[Description] = Field(None, alias='Description')
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    OptionSettings: Optional[ConfigurationOptionSettingsList] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )
    SourceConfiguration_1: Optional[SourceConfiguration] = Field(
        None, alias='SourceConfiguration'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateName: ConfigurationTemplateName


class CreateEnvironmentMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    CNAMEPrefix: Optional[DNSCnamePrefix] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    GroupName_1: Optional[GroupName] = Field(None, alias='GroupName')
    OperationsRole_1: Optional[OperationsRole] = Field(None, alias='OperationsRole')
    OptionSettings: Optional[ConfigurationOptionSettingsList] = None
    OptionsToRemove: Optional[OptionsSpecifierList] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TemplateName: Optional[ConfigurationTemplateName] = None
    Tier: Optional[EnvironmentTier] = None
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')


class CreatePlatformVersionRequest(BaseModel):
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    OptionSettings: Optional[ConfigurationOptionSettingsList] = None
    PlatformDefinitionBundle: S3Location
    PlatformName_1: PlatformName = Field(..., alias='PlatformName')
    PlatformVersion_1: PlatformVersion = Field(..., alias='PlatformVersion')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreatePlatformVersionResult(BaseModel):
    Builder_1: Optional[Builder] = Field(None, alias='Builder')
    PlatformSummary_1: Optional[PlatformSummary] = Field(None, alias='PlatformSummary')


class DeletePlatformVersionResult(BaseModel):
    PlatformSummary_1: Optional[PlatformSummary] = Field(None, alias='PlatformSummary')


class DescribeConfigurationOptionsMessage(BaseModel):
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    Options: Optional[OptionsSpecifierList] = None
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )
    TemplateName: Optional[ConfigurationTemplateName] = None


class DescribeEnvironmentHealthResult(BaseModel):
    ApplicationMetrics_1: Optional[ApplicationMetrics] = Field(
        None, alias='ApplicationMetrics'
    )
    Causes_1: Optional[Causes] = Field(None, alias='Causes')
    Color: Optional[String] = None
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    HealthStatus: Optional[String] = None
    InstancesHealth: Optional[InstanceHealthSummary] = None
    RefreshedAt_1: Optional[RefreshedAt] = Field(None, alias='RefreshedAt')
    Status: Optional[EnvironmentHealth] = None


class DescribeEnvironmentManagedActionHistoryResult(BaseModel):
    ManagedActionHistoryItems_1: Optional[ManagedActionHistoryItems] = Field(
        None, alias='ManagedActionHistoryItems'
    )
    NextToken: Optional[String] = None


class DescribeEnvironmentManagedActionsResult(BaseModel):
    ManagedActions_1: Optional[ManagedActions] = Field(None, alias='ManagedActions')


class EnvironmentResourceDescription(BaseModel):
    AutoScalingGroups: Optional[AutoScalingGroupList] = None
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    Instances: Optional[InstanceList] = None
    LaunchConfigurations: Optional[LaunchConfigurationList] = None
    LaunchTemplates: Optional[LaunchTemplateList] = None
    LoadBalancers: Optional[LoadBalancerList] = None
    Queues: Optional[QueueList] = None
    Triggers: Optional[TriggerList] = None


class EnvironmentResourceDescriptionsMessage(BaseModel):
    EnvironmentResources: Optional[EnvironmentResourceDescription] = None


class ListAvailableSolutionStacksResultMessage(BaseModel):
    SolutionStackDetails: Optional[AvailableSolutionStackDetailsList] = None
    SolutionStacks: Optional[AvailableSolutionStackNamesList] = None


class ListPlatformBranchesRequest(BaseModel):
    Filters: Optional[SearchFilters] = None
    MaxRecords: Optional[PlatformBranchMaxRecords] = None
    NextToken: Optional[Token] = None


class ListPlatformBranchesResult(BaseModel):
    NextToken: Optional[Token] = None
    PlatformBranchSummaryList_1: Optional[PlatformBranchSummaryList] = Field(
        None, alias='PlatformBranchSummaryList'
    )


class ListPlatformVersionsRequest(BaseModel):
    Filters: Optional[PlatformFilters] = None
    MaxRecords: Optional[PlatformMaxRecords] = None
    NextToken: Optional[Token] = None


class ListPlatformVersionsResult(BaseModel):
    NextToken: Optional[Token] = None
    PlatformSummaryList_1: Optional[PlatformSummaryList] = Field(
        None, alias='PlatformSummaryList'
    )


class LoadBalancerDescription(BaseModel):
    Domain: Optional[String] = None
    Listeners: Optional[LoadBalancerListenersDescription] = None
    LoadBalancerName: Optional[String] = None


class PlatformDescription(BaseModel):
    CustomAmiList_1: Optional[CustomAmiList] = Field(None, alias='CustomAmiList')
    DateCreated: Optional[CreationDate] = None
    DateUpdated: Optional[UpdateDate] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Frameworks: Optional[PlatformFrameworks] = None
    Maintainer_1: Optional[Maintainer] = Field(None, alias='Maintainer')
    OperatingSystemName_1: Optional[OperatingSystemName] = Field(
        None, alias='OperatingSystemName'
    )
    OperatingSystemVersion_1: Optional[OperatingSystemVersion] = Field(
        None, alias='OperatingSystemVersion'
    )
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    PlatformBranchLifecycleState_1: Optional[PlatformBranchLifecycleState] = Field(
        None, alias='PlatformBranchLifecycleState'
    )
    PlatformBranchName: Optional[BranchName] = None
    PlatformCategory_1: Optional[PlatformCategory] = Field(
        None, alias='PlatformCategory'
    )
    PlatformLifecycleState_1: Optional[PlatformLifecycleState] = Field(
        None, alias='PlatformLifecycleState'
    )
    PlatformName_1: Optional[PlatformName] = Field(None, alias='PlatformName')
    PlatformOwner_1: Optional[PlatformOwner] = Field(None, alias='PlatformOwner')
    PlatformStatus_1: Optional[PlatformStatus] = Field(None, alias='PlatformStatus')
    PlatformVersion_1: Optional[PlatformVersion] = Field(None, alias='PlatformVersion')
    ProgrammingLanguages: Optional[PlatformProgrammingLanguages] = None
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )
    SupportedAddonList_1: Optional[SupportedAddonList] = Field(
        None, alias='SupportedAddonList'
    )
    SupportedTierList_1: Optional[SupportedTierList] = Field(
        None, alias='SupportedTierList'
    )


class ResourceTagsDescriptionMessage(BaseModel):
    ResourceArn_1: Optional[ResourceArn] = Field(None, alias='ResourceArn')
    ResourceTags: Optional[TagList] = None


class SingleInstanceHealth(BaseModel):
    ApplicationMetrics_1: Optional[ApplicationMetrics] = Field(
        None, alias='ApplicationMetrics'
    )
    AvailabilityZone: Optional[String] = None
    Causes_1: Optional[Causes] = Field(None, alias='Causes')
    Color: Optional[String] = None
    Deployment_1: Optional[Deployment] = Field(None, alias='Deployment')
    HealthStatus: Optional[String] = None
    InstanceId_1: Optional[InstanceId] = Field(None, alias='InstanceId')
    InstanceType: Optional[String] = None
    LaunchedAt_1: Optional[LaunchedAt] = Field(None, alias='LaunchedAt')
    System: Optional[SystemStatus] = None


class UpdateApplicationResourceLifecycleMessage(BaseModel):
    ApplicationName_1: ApplicationName = Field(..., alias='ApplicationName')
    ResourceLifecycleConfig: ApplicationResourceLifecycleConfig


class ApplicationDescription(BaseModel):
    ApplicationArn_1: Optional[ApplicationArn] = Field(None, alias='ApplicationArn')
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    ConfigurationTemplates: Optional[ConfigurationTemplateNamesList] = None
    DateCreated: Optional[CreationDate] = None
    DateUpdated: Optional[UpdateDate] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    ResourceLifecycleConfig: Optional[ApplicationResourceLifecycleConfig] = None
    Versions: Optional[VersionLabelsList] = None


class ApplicationDescriptionList(RootModel[List[ApplicationDescription]]):
    root: List[ApplicationDescription]


class ApplicationDescriptionMessage(BaseModel):
    Application: Optional[ApplicationDescription] = None


class ApplicationDescriptionsMessage(BaseModel):
    Applications: Optional[ApplicationDescriptionList] = None


class DescribePlatformVersionResult(BaseModel):
    PlatformDescription_1: Optional[PlatformDescription] = Field(
        None, alias='PlatformDescription'
    )


class EnvironmentResourcesDescription(BaseModel):
    LoadBalancer: Optional[LoadBalancerDescription] = None


class InstanceHealthList(RootModel[List[SingleInstanceHealth]]):
    root: List[SingleInstanceHealth]


class DescribeInstancesHealthResult(BaseModel):
    InstanceHealthList_1: Optional[InstanceHealthList] = Field(
        None, alias='InstanceHealthList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RefreshedAt_1: Optional[RefreshedAt] = Field(None, alias='RefreshedAt')


class EnvironmentDescription(BaseModel):
    AbortableOperationInProgress_1: Optional[AbortableOperationInProgress] = Field(
        None, alias='AbortableOperationInProgress'
    )
    ApplicationName_1: Optional[ApplicationName] = Field(None, alias='ApplicationName')
    CNAME: Optional[DNSCname] = None
    DateCreated: Optional[CreationDate] = None
    DateUpdated: Optional[UpdateDate] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EndpointURL_1: Optional[EndpointURL] = Field(None, alias='EndpointURL')
    EnvironmentArn_1: Optional[EnvironmentArn] = Field(None, alias='EnvironmentArn')
    EnvironmentId_1: Optional[EnvironmentId] = Field(None, alias='EnvironmentId')
    EnvironmentLinks_1: Optional[EnvironmentLinks] = Field(
        None, alias='EnvironmentLinks'
    )
    EnvironmentName_1: Optional[EnvironmentName] = Field(None, alias='EnvironmentName')
    Health: Optional[EnvironmentHealth] = None
    HealthStatus: Optional[EnvironmentHealthStatus] = None
    OperationsRole_1: Optional[OperationsRole] = Field(None, alias='OperationsRole')
    PlatformArn_1: Optional[PlatformArn] = Field(None, alias='PlatformArn')
    Resources: Optional[EnvironmentResourcesDescription] = None
    SolutionStackName_1: Optional[SolutionStackName] = Field(
        None, alias='SolutionStackName'
    )
    Status: Optional[EnvironmentStatus] = None
    TemplateName: Optional[ConfigurationTemplateName] = None
    Tier: Optional[EnvironmentTier] = None
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')


class EnvironmentDescriptionsList(RootModel[List[EnvironmentDescription]]):
    root: List[EnvironmentDescription]


class EnvironmentDescriptionsMessage(BaseModel):
    Environments: Optional[EnvironmentDescriptionsList] = None
    NextToken: Optional[Token] = None
